@use 'sass:math';

@mixin max-width {
  width: min(120rem, 100% - 4rem);
  margin-inline: auto;
}

@mixin clamp-builder-font ($min-width-rem, $max-width-rem, $min-font-size, $max-font-size) {
  $root-font-size: 10; 

  $min-width: math.div($min-width-rem, $root-font-size);
  $max-width: math.div($max-width-rem, $root-font-size);

  $slope: math.div(($max-font-size - $min-font-size), ( $max-width - $min-width ));
  $y-axis-intersection: -$min-width * $slope + $min-font-size;

  & {
    font-size: clamp(#{$min-font-size}, #{$y-axis-intersection} + #{$slope * 10}vw, #{$max-font-size});
  }
}

@mixin button-states($clr-initial, $clr-hovered, $clr-pressed,  $clr-focused, $clr-disabled, $text-color) {
  & {
    color: $text-color;
    background-color: $clr-initial;
  }
  
  &:hover {
    color: $text-color;
    background-color: $clr-hovered;
  }

  &:active {
    color: $text-color;
    background-color: $clr-pressed;
  }

  &:focus-visible {
    color: $text-color;
    background-color: $clr-focused;
  }

  &:disabled {
    color: $text-color;
    background-color: $clr-disabled;
  }
}

@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
      type-of($raw-query) == "string",
      unquote($raw-query),
      inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'Not found the value for `#{$breakpoint}`. '
           + 'Please, you sure it\'s define in the map `$breakpoints`.';
  }
}

@mixin class-color-and-background ($pallet-color, $name-pallet: null) {
  @each $scale, $color in $pallet-color {
    @if $name-pallet != null {
      .clr-#{$name-pallet}-#{$scale} {
        color: #{$color};
      }
      .bg-#{$name-pallet}-#{$scale} {
        background-color: #{$color};
      }
    }
    @else {
      .clr-#{$scale} {
        color: #{$color};
      }
      .bg-#{$scale} {
        background-color: #{$color};
      }
    }
  }
}